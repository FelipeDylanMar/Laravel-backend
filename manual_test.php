<?php

/**
 * Testes manuais simples para Laravel
 * Execute com: D:\php\php.exe manual_test.php
 */

echo "=== Testes Manuais do Laravel ===\n\n";

// Teste 1: Verificar estrutura de arquivos
echo "1. Verificando estrutura de arquivos...\n";

$requiredFiles = [
    'artisan' => 'Arquivo artisan',
    'composer.json' => 'Configura√ß√£o do Composer',
    '.env' => 'Arquivo de ambiente',
    'app/Http/Controllers' => 'Diret√≥rio de Controllers',
    'app/Models' => 'Diret√≥rio de Models',
    'routes/web.php' => 'Arquivo de rotas web',
    'config/app.php' => 'Configura√ß√£o da aplica√ß√£o'
];

foreach ($requiredFiles as $file => $description) {
    if (file_exists($file)) {
        echo "   ‚úÖ $description: $file\n";
    } else {
        echo "   ‚ùå $description n√£o encontrado: $file\n";
    }
}

// Teste 2: Verificar configura√ß√µes do .env
echo "\n2. Verificando configura√ß√µes do .env...\n";

if (file_exists('.env')) {
    $envContent = file_get_contents('.env');
    
    $envChecks = [
        'APP_NAME=' => 'Nome da aplica√ß√£o',
        'APP_ENV=' => 'Ambiente da aplica√ß√£o',
        'APP_KEY=' => 'Chave da aplica√ß√£o',
        'DB_CONNECTION=' => 'Conex√£o do banco de dados'
    ];
    
    foreach ($envChecks as $key => $description) {
        if (strpos($envContent, $key) !== false) {
            echo "   ‚úÖ $description configurado\n";
        } else {
            echo "   ‚ùå $description n√£o encontrado\n";
        }
    }
} else {
    echo "   ‚ùå Arquivo .env n√£o encontrado\n";
}

// Teste 3: Verificar rotas
echo "\n3. Verificando arquivo de rotas...\n";

if (file_exists('routes/web.php')) {
    $routesContent = file_get_contents('routes/web.php');
    echo "   ‚úÖ Arquivo de rotas encontrado\n";
    
    if (strpos($routesContent, "Route::get('/'") !== false) {
        echo "   ‚úÖ Rota principal (/) definida\n";
    } else {
        echo "   ‚ö†Ô∏è  Rota principal (/) n√£o encontrada\n";
    }
} else {
    echo "   ‚ùå Arquivo de rotas n√£o encontrado\n";
}

// Teste 4: Verificar vendor/autoload
echo "\n4. Verificando depend√™ncias...\n";

if (file_exists('vendor/autoload.php')) {
    echo "   ‚úÖ Autoload do Composer encontrado\n";
    
    if (is_dir('vendor/laravel')) {
        echo "   ‚úÖ Framework Laravel instalado\n";
    } else {
        echo "   ‚ùå Framework Laravel n√£o encontrado\n";
    }
} else {
    echo "   ‚ùå Depend√™ncias n√£o instaladas (execute: composer install)\n";
}

// Teste 5: Verificar logs
echo "\n5. Verificando logs...\n";

if (is_dir('storage/logs')) {
    echo "   ‚úÖ Diret√≥rio de logs existe\n";
    
    $logFiles = glob('storage/logs/*.log');
    if (!empty($logFiles)) {
        echo "   ‚úÖ Arquivos de log encontrados: " . count($logFiles) . " arquivo(s)\n";
        
        // Verificar o log mais recente
        $latestLog = end($logFiles);
        $logContent = file_get_contents($latestLog);
        
        if (strpos($logContent, 'ERROR') !== false) {
            echo "   ‚ö†Ô∏è  Erros encontrados no log mais recente\n";
        } else {
            echo "   ‚úÖ Nenhum erro cr√≠tico no log mais recente\n";
        }
    } else {
        echo "   ‚úÖ Nenhum arquivo de log (aplica√ß√£o n√£o teve erros)\n";
    }
} else {
    echo "   ‚ùå Diret√≥rio de logs n√£o encontrado\n";
}

echo "\n=== Guia de Testes ===\n";
echo "\nüìã Para testar seu backend Laravel:\n";
echo "\n1. TESTES B√ÅSICOS (sem extens√µes PHP):\n";
echo "   ‚Ä¢ Execute: D:\\php\\php.exe manual_test.php\n";
echo "   ‚Ä¢ Verifique se o servidor roda: D:\\php\\php.exe artisan serve\n";
echo "   ‚Ä¢ Acesse http://127.0.0.1:8000 no navegador\n";

echo "\n2. TESTES DE ROTAS:\n";
echo "   ‚Ä¢ Crie rotas em routes/web.php\n";
echo "   ‚Ä¢ Teste no navegador: http://127.0.0.1:8000/sua-rota\n";
echo "   ‚Ä¢ Use Postman ou Insomnia para APIs\n";

echo "\n3. TESTES UNIT√ÅRIOS (ap√≥s instalar extens√µes):\n";
echo "   ‚Ä¢ Instale extens√µes PHP: mbstring, curl, sqlite\n";
echo "   ‚Ä¢ Execute: D:\\php\\php.exe artisan test\n";
echo "   ‚Ä¢ Crie testes: D:\\php\\php.exe artisan make:test MeuTeste\n";

echo "\n4. TESTES DE API:\n";
echo "   ‚Ä¢ Use ferramentas como Postman, Insomnia ou curl\n";
echo "   ‚Ä¢ Teste endpoints: GET, POST, PUT, DELETE\n";
echo "   ‚Ä¢ Verifique respostas JSON\n";

echo "\n=== Fim dos Testes ===\n";